#include <Script3d.h>
#include <Camera.s3d.h>
#include <config.s3d>
#include <interface/gui.s3d>
#include <map/level.s3d>
#include <network/network.s3d>
#include <player/player.s3d>
#include <player/enemy.s3d>


// Global scene parameters
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.3;
SET SCENE_FAR  = 200;

// Camera globals
var camType;
var globalCamDefaultPos = [2.0, 5.0, 30.0];

// Light globals
var Light0;
var PosL = [0.0, 30.0, 0.0];	// default light position

// Level globals
var myLevel;

// Players globals
var myPlayer;
var enemies = array(N_PLAYERS);

// Audio
var start_fx;

// Network
var myNetwork;

// Game
var game_started;
var myGUI;

// Function declarations
function initCamera(type, pos, dir);
function updateCamera();
function drawGrid(col, size);
function enterGame();


/* Show the initial menu */
function showMenu()
{
	// Draw the menu elements
	myGUI.drawMenu();
	
	// Spacebar to start
	if (keypressed(VK_SPACE)) {
		enterGame();
	} else if (keypressed(VK_ESCAPE)) {
		CVmWebBrowser().Quit();
	}
}


/* Periodically send update PDUs to the other hosts. */
function sendPeriodicalUpdates()
{
	static var last_score_update = 0;
	var t = getTime();
	
	if (t - last_score_update > SCORE_PDU_PERIOD) {
		var sc_pdu = myNetwork.craftScorePDU(myPlayer, enemies);
		myNetwork.sendPDU(sc_pdu);
		last_score_update = t;
	}
}


/* Start playing (game initialization) */
function enterGame()
{
	outputln("Preparing the field...");
	
	// Initialize light
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetAmbient(0.6, 0.6, 0.6);
	Light0.SetDiffuse(1, 0.85, 0.85);
	Light0.Enable();

	myNetwork = NetworkManager();
	myNetwork.init(MY_PLAYER_ID);

	myLevel = Level();
	myLevel.init("level_3D.txt");
	
	myPlayer = Player();
	var spawn_pos = myLevel.getRandomFloorPosition();
	var spawn_dir = myLevel.getNonWallDirection(spawn_pos);
	outputln("Spawned in " + str(spawn_pos));
	myPlayer.init(spawn_pos, spawn_dir, [0,1,0], myLevel, myNetwork);
	
	for (var i=0; i<N_PLAYERS; i++) {
		enemies[i] = Enemy();
		enemies[i].init(i, false, [0,0,0], 0, 0, myPlayer, myLevel, myNetwork);
	}
	
	myGUI.setPlayer(myPlayer);
	myGUI.setEnemies(enemies);
	
	// Initialize camera
	//initCamera(CAM_GLOBAL, globalCamDefaultPos, [0,0,-1]);
	initCamera(CAM_FPV, myPlayer.getPosition() + [0,1.7,0], myPlayer.getDirection());
	
	// Set the mouse cursor at the center
	SetCursorPos(0.5, 0.5);
	
	start_fx = CVmVRAWAV("start.wav");
	start_fx.play();

	game_started = true;
	outputln("Fight!");
}


/* onDownload() is performed at the beginning and downloads the files needed
 * by the application.
 */
function OnDownload()
{
	FileDownload("resources.zip");
}


/* onInit() is called after onDownload() and performs the initialization routine */
function OnInit(params)
{
	game_started = false;
	myGUI = GUI();
	myGUI.init();
}


/* onFrame() is called periodically (by default 100Hz) and manages the
 * graphics. It is the only place where graphics commands take effect.
 */
function OnFrame()
{	
	if (!game_started){
		showMenu();
	} else {
		var t = getTime();
		var t_respawn_left = myPlayer.respawn_time - t;
		
		// Check if should quit the application
		if (keypressed(VK_ESCAPE)) {
			CVmWebBrowser().Quit();
		}
		
		// Send periodical updates
		sendPeriodicalUpdates();
		
		updateCamera();
		SceneBegin();
		//drawGrid([0.5, 0.5, 0.5], 100);
		
		if (t_respawn_left <= 0)
			myPlayer.update();
	
		myLevel.draw();
	
		for (var i=0; i<N_PLAYERS; i++) {
			if (enemies[i].active) {
				enemies[i].update();
				enemies[i].draw();	
			}
		}
		if (myPlayer.hp <= 0) {
			enemies[myPlayer.killer].incrementKills();
			myPlayer.incrementDeaths();
			myPlayer.notifyDeath();
			myPlayer.respawn();
		}
		if (t_respawn_left <= 0)
			myPlayer.draw();
		
		myGUI.drawHUD(t_respawn_left);
		if (keypressed(VK_TAB)) {
			myGUI.drawScoreBoard();
		}
		
		ConsoleFinish();
		ShowCursor(false);
		SetCursorPos(0.5, 0.5);
		
		SceneEnd();
	}
}


/* DownloadReady() is called everytime a download in OnDownload() completes. */
function DownloadReady(RequestID) {}


/* onTimer() runs periodically (by default 100 Hz) and manages all
 * the periodic routines that are not strictly graphical.
 */
function OnTimer() 
{
	var pdu;
	var recv_iter = 0;

	if (!game_started)
		return;
	
	for (recv_iter; recv_iter < MAX_PDU_PER_TICK; recv_iter++) {
		// Try to acquire a PDU 
		pdu = myNetwork.receivePDU();
		
		// Handle the PDU, if any
		if (pdu != null) {
			// Simulate packet loss
			if (Rand(99) < PDU_LOSS_SIM_PERC)
				continue;
			
			// Position update:
			// [0]-typePDU, [1]-sender, [2,3,4]-posXYZ, [5]-angle, [6]-visible/hidden, [7]-animFrame
			if (pdu[0] == POSITION_PDU) {
				var player_id = pdu[1];
				enemies[player_id].active = true;
				enemies[player_id].changePosition([pdu[2], pdu[3], pdu[4]], pdu[5], pdu[6], pdu[7]);
			}
			
			// Bullet update:
			// [0]-typePDU, [1]-sender, [2]-weapon, [3]-bull_idx, [4,5,6]-posXYZ, [7,8,9]-dirXYZ, [10]-life, [11]-uniqueID
			if (pdu[0] == BULLET_PDU) {
				var player_id = pdu[1];
				enemies[player_id].setBullet(
						pdu[2]*ROCKET_BULLETS + pdu[3], 
						[pdu[4], pdu[5], pdu[6]],
						[pdu[7], pdu[8], pdu[9]],
						pdu[10],
						pdu[11]
				);
			}
			
			// Bullet hit notification:
			// [0]-typePDU, [1]-player_hit, [2]-hitter, [3]-weapon, [4]-bull_idx
			if (pdu[0] == HIT_PDU) {
				var player_hit_id = pdu[1];
				var hitter_id = pdu[2];
				var weap = pdu[3];
				var bull_idx = pdu[4];
				if (hitter_id == MY_PLAYER_ID) {
					myPlayer.handleHitTarget(weap, bull_idx);
				} else {
					enemies[hitter_id].bullets[weap*ROCKET_BULLETS + bull_idx] = null;
				}
			}
			
			// Kill notification:
			// [0]-typePDU, [1]-killed, [2]-killer
			if (pdu[0] == KILL_PDU) {
				var killed = pdu[1];
				var killer = pdu[2];
				enemies[killed].incrementDeaths();
				if (killer == MY_PLAYER_ID) {
					myPlayer.incrementKills();
				} else {
					enemies[killer].incrementKills();
				}
			}
			
			// Score update:
			// [0]-typePDU, [1]-sender, [2+2*i]-player_i_kills, [3+2*i]-player_i_deaths
			if(pdu[0] == SCORE_PDU)	{
				var player_id = pdu[1];
				for (var i=0; i<N_PLAYERS; i++){
					if ((i != MY_PLAYER_ID) && (enemies[i].active)) {
						enemies[i].tryIncrementKills(pdu[2+2*i]);
						enemies[i].tryIncrementDeaths(pdu[3+2*i]);	
					} else if (i == MY_PLAYER_ID) {
						myPlayer.tryIncrementKills(pdu[2+2*i]);
						myPlayer.tryIncrementDeaths(pdu[3+2*i]);
					}
				}
			}
		} else	// no PDU pending
			break;
	}
	//outputln("PDUs received within tick: " + str(recv_iter));
}


/* onEvent() is called whenever the application receives a message. */
function OnEvent(eventID, wparam, lparam) {}


/* onError() is called when the applications produces an error */
function OnError() {}


/* onExit() is called when the application is about to terminate. */
function OnExit() {}


/* Initialize the camera */
function initCamera(type, pos, dir)
{
	camType = type;
	CameraGetCurrent().SetPosition(pos);
	CameraGetCurrent().SetDirection(dir);
}


/* Update the camera */
function updateCamera()
{	
	if (camType == CAM_GLOBAL) {
		CameraMoveMouse_MBL_LC();
	}
	
	if (camType == CAM_FPV) {
		myPlayer.obj.hide();
		// set the camera position slightly behind the head to avoid see-through walls effect
		CameraGetCurrent().SetPosition(myPlayer.getPosition() + [0,1.5,0] - 0.25*myPlayer.getDirection());
		CameraGetCurrent().SetDirection(myPlayer.getDirection());
	}
}


function DrawGrid(col, size)
{
	// Save current OpenGL state
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	// Restore previous OpenGL state
	glPopAttrib();
}
