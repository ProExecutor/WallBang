/* Class Level represents the map corresponding to a level of the game */

class Level
{
	// graphics
	var wall_mesh;
	var wall_material;
	var wall_texture;
	var wall_obj_array;
	var floor_mesh;
	var floor_material;
	var floor_texture;
	
	// topology
	var level_matrix;
	
	init(level_textfile);
	detectCollision(pos, r);
	draw();
};


/* Initialize the level map */
function Level::init(level_textfile)
{
	// Load topology from a file
	var f = LoadFile(level_textfile);
	var num_rows = len(f);
	var num_columns = len(f[0]);
	trace(num_rows, num_columns);
	
	// Configure the walls visual parameters (e.g. textures)
	wall_texture = CVmTexture("Mattoni03.png");
	wall_material = CVmMaterial();
	wall_material.SetTexture(wall_texture);
	wall_material.ChangeTextureParams(VR_V_TILING, 3);
	wall_mesh = CVmNewMesh(VRP_BOX);
	wall_mesh.SetMaterial(wall_material);
	wall_mesh.Scale(1,3,1);
	
	// Create the walls of the maze
	level_matrix = array(num_rows);
	wall_obj_array = array(0);
	for (var i=0; i<num_rows; i++) {
		level_matrix[i] = array(num_columns);
		for (var j=0; j<num_columns; j++) {
			if (f[i][j] == "*") {
				// Create a wall
				var new_wall = CVmObj(wall_mesh);
				new_wall.SetPosition(j,0,i);
				aadd(wall_obj_array, new_wall);
				level_matrix[i][j] = 1;	
			} else {
				level_matrix[i][j] = 0;
			}
		}
	}
	
	// Configure the floor visual parameters
	floor_texture = CVMtexture("MARMO.png");
	floor_material = CVmMaterial();
	floor_material.SetTexture(floor_texture);
	floor_material.ChangeTextureParams(VR_U_TILING, 4);
	floor_material.ChangeTextureParams(VR_V_TILING, 4);
	floor_mesh = CVmNewMesh(VRP_BOX);
	floor_mesh.scale(num_columns, 1, num_rows);
	floor_mesh.translate(0,-1,0);
	floor_mesh.SetMaterial(floor_material);
}


/* Check if a point is inside a wall of the level map */
function Level::detectCollision(pos, r)
{
	var coll_code = 0;
	var i = int(pos.z);
	var j = int(pos.x);
	
	// Check if colliding with the walls
	//if (level_matrix[i][j] == 0)
	//	return coll_code;
	
	// If colliding, detect where
	var i_low = int(pos.z - r);
	var i_high = int(pos.z + r); 
	var j_low = int(pos.x - r);
	var j_high = int(pos.x + r);
	if ((level_matrix[i][j_low] != 0) || (level_matrix[i][j_high] != 0))
		coll_code |= 4;
	//if <TODO: colliding in Y>
	//	coll_code |= 2;
	if ((level_matrix[i_low][j] != 0) || (level_matrix[i_high][j] != 0))
		coll_code |= 1;
	
	return coll_code;
}


/* Draw the map */
function Level::draw()
{
	foreach (var w in wall_obj_array)
		w.Draw();
	wall_mesh.Draw();
	floor_mesh.Draw();
}