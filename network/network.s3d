#ifndef NETWORK_S3D_
#define NETWORK_S3D_

//#define IP_BROADCAST 		"192.168.1.255"
#define IP_BROADCAST 		"10.80.35.255"
#define IP_LISTENING 		"0.0.0.0"
#define PORT_BROADCAST 		50023
#define PORT_LISTENING 		50023

#define POSITION_PDU 	1
#define BULLET_PDU 		2
#define HIT_PDU 		3
#define SCORE_PDU  		6


class NetworkManager {

	// UDP
	var net_channel;
	
	// Network parameters
	var host_id;
	
	// Stats
	var in_traffic;
	var out_traffic;

	init(id);
	updateInTrafficStats(time, size);
	updateOutTrafficStats(time, size);
	craftPlayerPosPDU(pos, angle);
	craftBulletPosPDU(weap, bull_idx, pos, dir, life);
	sendPDU(pdu);
	receivePDU();
};


/* Initialize the network manager */
function NetworkManager::init(id)
{
	host_id = id;
	out_traffic = 0;
	net_channel= NetCreateChannel(PORT_LISTENING, IP_LISTENING, VR_NO_BLOCKING);
}


/* Update stats for incoming traffic */
function NetworkManager::updateInTrafficStats(time, size)
{
	static var counter = 0;
	static var old_time = 0;
    
    // Compute network load stats every second or less
    if (time - old_time > 1000) {
    	in_traffic = counter;
    	old_time = time;
    	counter = 0;	
    }
    counter += size;
}


/* Update stats for outcoming traffic */
function NetworkManager::updateOutTrafficStats(time, size)
{
	static var counter = 0;
	static var old_time = 0;
    
    // Compute network load stats every second or less
    if (time - old_time > 1000) {
    	out_traffic = counter;
    	old_time = time;
    	counter = 0;	
    }
    counter += size;
}


/* Create a PDU for updates about the player position 
 * [0]-typePDU, [1]-sender, [2,3,4]-posXYZ, [5]-angle
 */
function NetworkManager::craftPlayerPosPDU(pos, angle)
{
	var pdu = vector(6);
	
	pdu[0] = POSITION_PDU;
	pdu[1] = host_id;
	pdu[2] = pos.x;
	pdu[3] = pos.y;
	pdu[4] = pos.z;
	pdu[5] = angle;
	
	return pdu;
}


/* Create a PDU for updates about the position of a bullet
 * [0]-typePDU, [1]-sender, [2]-weapon, [3]-bull_idx, [4,5,6]-posXYZ, [7,8,9]-dirXYZ, [10]-life
 */
 function NetworkManager::craftBulletPosPDU(weap, bull_idx, pos, dir, life)
 {
 	var pdu = vector(11);
	
	pdu[0] = BULLET_PDU;
	pdu[1] = host_id;
	pdu[2] = weap;
	pdu[3] = bull_idx;
	pdu[4] = pos.x;
	pdu[5] = pos.y;
	pdu[6] = pos.z;
	pdu[7] = dir.x;
	pdu[8] = dir.y;
	pdu[9] = dir.z;
	pdu[10] = life;
	
	return pdu;	
 }


/* Broadcast a PDU over the network */
function NetworkManager::sendPDU(pdu)
{
	// Update stats
    updateOutTrafficStats(getTime(), len(pdu));
    
    // Send
	NetVarSendTo(IP_BROADCAST, PORT_BROADCAST, pdu);
}


/* Receive a PDU from the network */
function NetworkManager::receivePDU()
{
	var sender_ip = "...";
	var recv_data = NetVarReceiveFrom(net_channel, &sender_ip);
	
	if (recv_data != null && recv_data[1] != host_id) { 	// avoid your own data
		// Update stats
		updateOutTrafficStats(getTime(), len(recv_data));
		return recv_data;
	} else {
		return null;
	}
}

#endif
