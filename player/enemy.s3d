class Enemy {
	
	var active;
	var pos;
	var angle;
	var score;
	var level;
	var bullets;
	
	// graphics
	var lower_mesh;
	var upper_mesh;
	var lower_obj;
	var upper_obj;
	var obj;
	
	init(act, p, a, sc, lvl);
	draw();
	update();
	changePosition(new_pos, new_angle);
	setRotation(angle);
	IncrementScore();
	tryIncrementScore(new_score);
};


function Enemy::init(act, p, a, s, lvl)
{
	active = act;
	pos = p;
	angle = a;
	score = s;
	level = lvl;
	
	bullets = array(N_BULLETS_PLAYER);
	for (var i=0; i<N_BULLETS_PLAYER; i++)
		bullets[i] = null;
		
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf);
	
	lower_obj = CVmObj(lower_mesh);
	upper_obj = CVmObj(upper_mesh);
	obj = CVmObj();
	obj.addchild(upper_obj);
	obj.addchild(lower_obj);
	// TODO add weapon mesh
	obj.SetPosition(pos);
	obj.SetRotation(angle);
}


function Enemy::draw()
{
	obj.Draw(VR_FRAMENUMBER, 1);
	
	for (var i=0; i<N_BULLETS_PLAYER; i++) {
		if (bullets[i] != null) {
			bullets[i].draw();
		}
	}
}


function Enemy::update()
{
	for (var i=0; i<N_BULLETS_PLAYER; i++) {
		if (bullets[i] != null) {
			var b_life_res = bullets[i].update();
			if (b_life_res == 0)
				bullets[i] = null;
		}
	}
}


function Enemy::changePosition(new_pos, new_angle)
{
	pos = new_pos;
	angle = new_angle;
	SetRotation(angle);
	obj.SetPosition(pos);
}


function Enemy::setRotation(angle)
{
	obj.setRotation(angle*180.0/PI, 0, 1, 0);
}


function Enemy::incrementScore()
{
	score += 1;
}


function Enemy::tryIncrementScore(new_score)
{
	if (new_score > score)
		score = new_score;
}