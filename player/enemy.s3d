class Enemy {
	
	var id;
	var active;
	var alive;
	var pos;
	var angle;
	var score;
	var bullets;
	var last_uid;
	var kills;
	var deaths;
	
	// graphics
	var lower_mesh;
	var upper_mesh;
	var weap_mesh;
	var lower_obj;
	var upper_obj;
	var weap_obj;
	var obj;
	var anim_frame;
	
	// collision detection
	var my_player;
	var level;
	
	// connection
	var network;
	
	init(enemy_id, act, p, a, sc, pl, lvl, net);
	draw();
	update();
	changePosition(new_pos, new_angle, visible, frame);
	setRotation(angle);
	setBullet(idx, pos, dir, life, uid);
	IncrementKills();
	incrementDeaths();
	tryIncrementKills(new_kills);
	tryIncrementDeaths(new_deaths);
};


function Enemy::init(enemy_id, act, p, a, s, pl, lvl, net)
{
	id = enemy_id;
	active = act;
	alive = true;
	pos = p;
	angle = a;
	score = s;
	my_player = pl; 
	level = lvl;
	network = net;
	kills = 0;
	deaths = 0;
	anim_frame = 1;
	
	bullets = array(N_BULLETS_PLAYER);
	last_uid = array(N_BULLETS_PLAYER);
	for (var i=0; i<N_BULLETS_PLAYER; i++) {
		bullets[i] = null;
		last_uid[i] = -1;	
	}
		
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf);
	weap_mesh = CVmNewMesh("rocketl.AAM");
	weap_mesh.scale(sf);
	
	lower_obj = CVmObj(lower_mesh);
	upper_obj = CVmObj(upper_mesh);
	weap_obj = CVmObj(weap_mesh);
	obj = CVmObj();
	obj.addchild(upper_obj);
	obj.addchild(lower_obj);
	obj.addchild(weap_obj);

	obj.SetPosition(pos);
	obj.SetRotation(angle);
}


function Enemy::draw()
{
	if (alive) {
		obj.Draw(VR_FRAMENUMBER, anim_frame);
		
		for (var i=0; i<N_BULLETS_PLAYER; i++) {
			if (bullets[i] != null) {
				bullets[i].draw();
			}
		}
	}
}


function Enemy::update()
{
	for (var i=0; i<N_BULLETS_PLAYER; i++) {
		if (bullets[i] != null) {
			var b_life_res = bullets[i].update(true, my_player.position);
			
			if (b_life_res <= 0) {
				// stop the projectile, for whatever reason
				bullets[i] = null;	
			}
			if (b_life_res == -1) {
				// the bullet hit my player
				var weap, bull_idx, damage;
				outputln("My player was hit!!");
				if (i < ROCKET_BULLETS) {
					weap = WEAP_ROCKET_TYPE;
					bull_idx = i;
					damage = ROCKET_DMG;
				} else {
					weap = WEAP_RAILGUN_TYPE;
					bull_idx = i - ROCKET_BULLETS;
					damage = RAILGUN_DMG;
				}
				// Apply damage and check if the player was killed
				if ((my_player.hp > 0) && (my_player.hp - damage <= 0))
					my_player.killer = id;
				my_player.hp -= damage;
				
				// Tell others my player was hit
				my_player.notifyHit(id, weap, bull_idx);
			}
		}
	}
}


function Enemy::changePosition(new_pos, new_angle, visible, frame)
{
	pos = new_pos;
	angle = new_angle;
	anim_frame = frame;
	if (visible == 0)
		alive = false;
	else
		alive = true;
	SetRotation(angle);
	obj.SetPosition(pos);
}


function Enemy::setRotation(angle)
{
	obj.setRotation(angle*180.0/PI, 0, 1, 0);
}


/* Create a bullet with the specified parameters or, if it already exists, update it. */
function Enemy::setBullet(idx, pos, dir, life, uid)
{
	if ((bullets[idx] == null) && (uid != last_uid[idx])) {
		// if the bullet does not exist, and the UID is not the same of the last destroyed bullet
		var btype;
		if (idx < ROCKET_BULLETS)
			btype = BULLET_LARGE_TYPE;
		else
			btype = BULLET_SMALL_TYPE;
			
		bullets[idx] = Bullet();
		bullets[idx].init(btype, pos, dir, level, network);
		// Enforce the position (should be absolute, init computed it w.r.t player feet)
		bullets[idx].position = pos; 
		// Enforce the UID
		bullets[idx].uid = uid;
		last_uid[idx] = uid;
	} else if (bullets[idx] != null) {
		// if the bullet already exists
		bullets[idx].changePosition(pos);
		// bullets[idx].dir = dir;		// unnecessary since direction is constant
		bullets[idx].life = life;
	}
	// check if expired
	if ((bullets[idx] != null) && (bullets[idx].life == 0))
		bullets[idx] = null;
}


function Enemy::incrementKills()
{
	kills += 1;
}


function Enemy::incrementDeaths()
{
	deaths += 1;
}


function Enemy::tryIncrementKills(new_kills)
{
	if (new_kills > kills)
		kills = new_kills;
}


function Enemy::tryIncrementDeaths(new_deaths)
{
	if (new_deaths > deaths)
		deaths = new_deaths;
}