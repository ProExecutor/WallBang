#include <network/network.s3d>
#include <weapons/weapon_class.s3d>

#define TWO_PI 		6.283185

#define SWAT_START_WALK 	16
#define SWAT_END_WALK 		48
#define SWAT_STEP			0.004
#define SWAT_FRAME_STEP 	0.5
#define SWAT_TURN_RATE 		0.01
#define SWAT_BACKSTEP_SLOW  0.8
#define SWAT_JUMP_SPEED     1.0
#define SWAT_HITBOX_RADIUS	0.3
#define CHANGE_WEAPON_COOLDOWN 	100
#define N_BULLETS_PLAYER	(ROCKET_BULLETS + RAILGUN_BULLETS)

class Player {
	
	// kinematics
	var position;
	var angle_h;
	var angle_v;
	var direction;
	var v_y;
	var is_jumping;
	var has_moved;
	var prev_time;
	
	// weaponry
	var rocket_launcher;
	var railgun;
	var curr_weapon;
	var curr_weapon_idx;
	var change_weapon_cd;
	
	// animation
	var current_frame;
	
	// graphics
	var color;
	var lower_mesh;
	var upper_mesh;
	var lower_obj;
	var upper_obj;
	var obj;
	
	// audio
	var step_fx;
	var jump_fx;
	
	// camera
	var last_deltaX;
	var last_deltaY;
	
	// collision detection
	var hitbox_rad;
	var level;
	
	// game
	var kills;
	var deaths;
	
	// multiplayer
	var network;
	
	init(pos, dir, col, level, net);
	getPosition();
	getDirection();
	setPosition(pos);
	setRotation(angle);
	shoot();
	changeWeapon();
	getRemainingShots();
	getMagazineSize();
	hasMoved();
	isReloading();
	incrementKills();
	incrementDeaths();
	handleHitTarget(weap, bull_idx);
	draw();
	update();
};


/* Initialize the soldier */
function Player::init(pos, dir, col, lvl, net) 
{
	position = pos;
	direction = dir;
	color = col;
	level = lvl;
	network = net;

	angle_h = atan2(dir.x, dir.z) % TWO_PI;
	angle_v = 0;
	v_y = 0;
	is_jumping = false;
	has_moved = false;
	hitbox_rad = SWAT_HITBOX_RADIUS;
	last_deltaX = 0;
	last_deltaY = 0;
	prev_time = getTime();
	
	current_frame = SWAT_START_WALK;
	
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf);
	
	lower_obj = CVmObj(lower_mesh);
	upper_obj = CVmObj(upper_mesh);
	
	rocket_launcher = Weapon();
	rocket_launcher.init(WEAP_ROCKET_TYPE, position, direction, sf, level, network);
	railgun = Weapon();
	railgun.init(WEAP_RAILGUN_TYPE, position, direction, sf, level, network);
	curr_weapon = rocket_launcher;
	curr_weapon_idx = WEAP_ROCKET_TYPE;
	change_weapon_cd = 0;
	
	kills = 0;
	deaths = 0;
	
	obj = CVmObj();
	obj.addchild(upper_obj);
	obj.addchild(lower_obj);
	obj.addchild(curr_weapon.getObject());
	
	SetRotation(angle_h);
	obj.SetPosition(position);
	
	upper_obj.ModulateMaterials(color);
	
	step_fx = CVmVRAWAV("step.wav");
	jump_fx = CVmVRAWAV("jump.wav");
	
	var pos_pdu = network.craftPlayerPosPDU(position, angle_h);
	network.sendPDU(pos_pdu);
}


/* Get the player's current position */
function player::getPosition()
{
	return position;
}


/* Get the player's current direction */
function player::getDirection()
{
	return direction;
}


/* Translate the soldier */
function player::setPosition(pos)
{
	position = pos;
	obj.SetPosition(pos);
}


/* Rotate the soldier */
function Player::setRotation(angle)
{
	obj.setRotation(angle*180.0/PI, 0, 1, 0);
}


/* Shoot */
function Player::shoot()
{
	if (change_weapon_cd <= 0)
		curr_weapon.fire();
}


/* Switch the weapon */
function Player::changeWeapon()
{
	if (change_weapon_cd <= 0)
		change_weapon_cd = CHANGE_WEAPON_COOLDOWN;
	else
		return;
	
	obj.RemoveChild(curr_weapon.getObject());
	
	if (curr_weapon_idx == WEAP_ROCKET_TYPE) {
		curr_weapon = railgun;
		curr_weapon_idx = WEAP_RAILGUN_TYPE;
	} else {
		curr_weapon = rocket_launcher;
		curr_weapon_idx = WEAP_ROCKET_TYPE;
	}
	
	obj.AddChild(curr_weapon.getObject());
}


/* Get the number of shots left in the magazine */
function Player::getRemainingShots()
{
	return curr_weapon.getRemainingShots();
}


/* Get the total size of the rifle magazine */
function Player::getMagazineSize()
{
	return curr_weapon.getMagazineSize();
}


/* Draw the soldier */
function Player::draw()
{
	obj.Draw(VR_FRAMENUMBER, current_frame);
	curr_weapon.drawEffects();
}


/* Return true if the player has moved (or attempted to do so)
 * during the last update cycle
 */
 function Player::hasMoved()
 {
 	return has_moved;
 }


/* Return true if the player is reloading, false otehrwise */
function Player::isReloading()
{
	return curr_weapon.isReloading();
}


/* Record a kill */
function Player::incrementKills()
{
	kills += 1;
}


/* Record a death */
function Player::incrementDeaths()
{
	deaths += 1;
}


/* Routine performed when one of the projectiles hit an enemy */
function Player::handleHitTarget(weap, bull_idx)
{
	// Remove the projectile
	if (weap == WEAP_ROCKET_TYPE)
		rocket_launcher.removeBullet(bull_idx);
	else
		railgun.removeBullet(bull_idx);

	// Increment the kill
	incrementKills();
}


/* Update the soldier state */
function Player::update()
{
	var old_position = position;
	var run = 1;
	has_moved = false;
	var mouse_dx = Mouse.DeltaX;
	var mouse_dy = Mouse.DeltaY;
	var t = getTime();
	
	// Check if turning, and recompute angle accordingly
	angle_h = (angle_h - SWAT_TURN_RATE * mouse_dx) % TWO_PI;
	angle_v = (angle_v - SWAT_TURN_RATE * mouse_dy) % TWO_PI;
	if (mouse_dx != 0)
		has_moved = true;
	
	// Recompute orientation	
	direction = [sin(angle_h), sin(angle_v), cos(angle_h)];
	
	// Check if running
	if (keypressed(VK_SHIFT))
		run = 2;
	
	// Check if moving forward/backwards, and recompute position accordingly
	var forward_direction = [direction.x, 0, direction.z];
	if (keypressed(VK_UP) || keypressed("w")) {
		has_moved = true;
		position += SWAT_STEP * (t - prev_time) * forward_direction * run;
		current_frame += SWAT_FRAME_STEP;
		if (current_frame > SWAT_END_WALK)
			current_frame = SWAT_START_WALK;
		step_fx.play();
	} else if (keypressed(VK_DOWN) || keypressed("s")) {
		has_moved = true;
		position -= SWAT_STEP * (t - prev_time) * forward_direction * SWAT_BACKSTEP_SLOW;
		current_frame -= SWAT_FRAME_STEP * SWAT_BACKSTEP_SLOW;
		if (current_frame < SWAT_START_WALK)
			current_frame = SWAT_END_WALK;
		step_fx.play();
	}
	
	// Check if sidestepping
	var side_direction = [-direction.z, 0, direction.x]; 
	if (keypressed(VK_RIGHT) || keypressed("d")) {
		has_moved = true;
		position += SWAT_STEP * (t - prev_time) * side_direction;
	}
	if (keypressed(VK_LEFT) || keypressed("a")) {
		has_moved = true;
		position -= SWAT_STEP * (t - prev_time) * side_direction;
	}
	
	// Check if jumping
	if (keypressed(VK_SPACE) && (!is_jumping)) {
		outputln("jump");
		has_moved = true;
		is_jumping = true;
		v_y = SWAT_JUMP_SPEED;
		jump_fx.play();
	}
	
	// Recompute vertical position and speed
	v_y -= 0.05;
	position.y += v_y * 0.05;
	
	// Collision detection (fix movement if hitting a wall)
	var coll_code = level.detectCollision(position, hitbox_rad);
	//outputln(coll_code);
	if (coll_code & 32 != 0) {
		// When hitting a corner, consider the two axes separately.
		// Moving along each axis is allowed only if the direction is not
		// towards the corner, that is the player is going away from it.  
		var dx = position.x - old_position.x;
		var dy = position.y - old_position.y;
		var dz = position.z - old_position.z;
		var prohib_x = (coll_code & 16) - 0.5;
		var prohib_z = (coll_code & 8) - 0.5;
		if (dx * prohib_x > 0)
			dx = 0;
		if (dz * prohib_z > 0)
			dz = 0;
		position = old_position + [dx, dy, dz];
	}
	if (coll_code & 4 != 0) {
		// If hitting a wall parallel to the x axis, slide along it
		position.x = old_position.x;
	}
	if (coll_code & 2 != 0) {
		// If hitting a wall parallel to the z axis, slide along it
		position.z = old_position.z;
	}
	if (coll_code & 1 != 0) {
		// If hitting a horizontal surface, cancel the vertical speed and fix the position
		var point_h = level.level_matrix[int(position.z)][int(position.x)];
		if (position.y < point_h) {
			//outputln("setting height from " + str(position.y) + " to " + str(point_h));
			if (point_h - position.y > 1.0) {
				// attempt to climb a definitely too high wall
				var delta_pos = Norm(position.x_z - old_position.x_z);
				position -= delta_pos;
				position.y = level.level_matrix[int(position.z)][int(position.x)];
				outputln(delta_pos);
				is_jumping = false;
			} else {
				// just a typical "slightly below the floor" due to gravity, or a small successful leap
				position.y = point_h;
				is_jumping = false;
			}
		}
		v_y = 0;
	}
	// Apply the movement changes	
	setRotation(angle_h);
	setPosition(position);
		
	// Check if the weapon is firing, then update it and its bullets
	if (keypressed(VK_LBUTTON)) {
		shoot();
	}
	curr_weapon.update(position, direction);
	
	// Check if reloading
	if (keypressed("r")) {
		curr_weapon.reload();
	}
	
	// Check if switching weapon
	if (keypressed("c")) {
		changeWeapon();
	}
	if (change_weapon_cd > 0)
		change_weapon_cd -= 1;
		
	if (hasMoved()) {
		var pos_pdu = network.craftPlayerPosPDU(position, angle_h);
		network.sendPDU(pos_pdu);
	}
		
	prev_time = t;
	//outputln("posX: " + str(position.x) + "  posY: " + str(position.y) + "  posZ: " + str(position.z));
}