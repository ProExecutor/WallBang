/* The class Bullet represents a projectile fired from a weapon */

#include <network/network.s3d>

#define BULLET_LARGE_TYPE	0
#define BULLET_SMALL_TYPE 	1
#define BULLET_LARGE_SPEED 	0.2
#define BULLET_SMALL_SPEED 	0.35
#define BULLET_LARGE_SCALE	0.25
#define BULLET_SMALL_SCALE 	0.1
#define BULLET_LIFE 		100


class Bullet 
{	
	var weap;
	
	// kinematics
	var position;
	var direction;
	var speed;
	var life;
	
	// graphics
	var scale;
	var mesh;
	var obj;
	
	// collision detection
	var lev;
	
	// audio
	var hit_body_fx;
	var hit_wall_fx;
	
	// connection
	var network;
	
	init(type, pos, dir, lvl, net);
	changePosition(new_pos);
	update();
	draw();
};


/* Initialize a Bullet given the player position and direction */
function Bullet::init(type, pos, dir, lvl, net)
{
	var right_perp = [-dir.z, 0, dir.x];
	
	weap = type;
	position = pos + [0,1.2,0] + 0.2*right_perp;	// offset for spawning from the gun
	direction = dir;
	lev = lvl;
	network = net;
	
	if (type == BULLET_LARGE_TYPE) {
		speed = BULLET_LARGE_SPEED;
		life = BULLET_LIFE;
		scale = BULLET_LARGE_SCALE;
		hit_body_fx = CVmVRAWAV("rocket_hit.wav");
		hit_wall_fx = CVmVRAWAV("rocket_hit.wav");
	} else {
		speed = BULLET_SMALL_SPEED;
		life = BULLET_LIFE;
		scale = BULLET_SMALL_SCALE;
		hit_body_fx = CVmVRAWAV("bullet_body.wav");
		hit_wall_fx = CVmVRAWAV("bullet_wall.wav");
	}
	
	mesh = CVMNewMesh(VRP_SPHERE);
	mesh.Scale(scale);
	obj = CVmObj(mesh);
	obj.SetPosition(position);
}


/* Set the spatial position of the bullet */
function Bullet::changePosition(new_pos)
{
	position = new_pos;
	obj.SetPosition(position);
}


/* Update the state of the bullet, according to kinematics and game rules */
function Bullet::update()
{
	// projectile decay; if over, notify the weapon
	life -= 1;
	if (life <= 0)
		return 0;
		
	// update the position
	position += direction * speed;
	var coll_code = lev.detectCollision(position, scale/2.0); 
	if (coll_code > 1 && coll_code != 16) {
		hit_wall_fx.play();
		// TODO apply area damage
		life = 0;
	}
	
	obj.SetPosition(position);
	
	return life;
}


/* Draw the bullet */
function Bullet::draw()
{
	obj.Draw();
}
